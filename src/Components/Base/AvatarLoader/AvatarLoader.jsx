import './AvatarLoader.css';
import { useRef, useState } from 'react';
import { useDispatch } from 'react-redux';
import { avatarIsValid, resizeImage } from '../../../utils';
import { showNotice, updateUser } from '../../../Store/actionCreators';
import AvatarCroper from '../AvatarCroper/AvatarCroper';

export default function AvatarLoader({ userId, avatarUrl }) {
  const inputRef = useRef(null);
  const [file, setFile] = useState();
  const dispatch = useDispatch();

  const onChangeAvatar = async (e) => {
    const src = URL.createObjectURL(e.target.files[0]);
    e.target.value = '';
    const { message, status } = await avatarIsValid(src);
    if (status) {
      setFile(src);
    } else dispatch(showNotice(message, status));
  };

  const updateAvatar = async (newSrc) => {
    if (newSrc) {
      const { message, status } = await avatarIsValid(newSrc);
      if (status) {
        setFile(null);
        const smallFile = await resizeImage(newSrc);
        const formData = new FormData();
        formData.append('avatar', smallFile, 'avatar.jpg');
        formData.append('id', userId);
        dispatch(updateUser(
          formData,
          '–ú—ã –æ–±–Ω–æ–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –£ –í–∞—Å –∏–∑—É–º–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æüòä',
          '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º',
        ));
      } else dispatch(showNotice(message, status));
    } else {
      setFile(null);
      dispatch(showNotice('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª', false));
    }
  };

  const onClickAvatar = (e) => {
    inputRef.current.dispatchEvent(new MouseEvent('click'));
  };

  const onCloseCroper = (e) => {
    if (e) e.preventDefault();
    setFile(null);
  };

  return (
    <div className="AvatarLoaderContainer">
    <div className="AvatarLoader AvatarLoader--notInstaled" onClick={onClickAvatar} style={{ backgroundImage: `url(${avatarUrl})` }}>
      <input className="AvatarLoader__input" ref={inputRef} onChange={onChangeAvatar} name="avatar" type="file" accept="image/*"/>
      <span className="AvatarLoader__text">
        {!avatarUrl && '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –í–∞—à–µ —Ä–µ–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'}
        {avatarUrl && '–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'}
      </span>
    </div>
    {file && <AvatarCroper img={file} onCropped={updateAvatar} onClose={onCloseCroper}/>}
    </div>
  );
}
